[{"D:\\Jetbrain\\saajaws\\saajcalcengine\\src\\index.tsx":"1","D:\\Jetbrain\\saajaws\\saajcalcengine\\src\\reportWebVitals.ts":"2","D:\\Jetbrain\\saajaws\\saajcalcengine\\src\\App.tsx":"3","D:\\Jetbrain\\saajaws\\saajcalcengine\\src\\aws-exports.js":"4","D:\\Jetbrain\\saajaws\\saajcalcengine\\src\\components\\InputPage.tsx":"5","D:\\Jetbrain\\saajaws\\saajcalcengine\\src\\components\\Lehenga.tsx":"6","D:\\Jetbrain\\saajaws\\saajcalcengine\\src\\components\\SalwarKameez.tsx":"7","D:\\Jetbrain\\saajaws\\saajcalcengine\\src\\typedef\\style.ts":"8","D:\\Jetbrain\\saajaws\\saajcalcengine\\src\\util\\sizeOptions.ts":"9","D:\\Jetbrain\\saajaws\\saajcalcengine\\src\\components\\common\\VimeoVideo.tsx":"10","D:\\Jetbrain\\saajaws\\saajcalcengine\\src\\components\\common\\CommonTopFitting.tsx":"11","D:\\Jetbrain\\saajaws\\saajcalcengine\\src\\components\\common\\CutomTooltip.tsx":"12","D:\\Jetbrain\\saajaws\\saajcalcengine\\src\\util\\tooltipText.ts":"13","D:\\Jetbrain\\saajaws\\saajcalcengine\\src\\util\\nameUtil.ts":"14","D:\\Jetbrain\\saajaws\\saajcalcengine\\src\\components\\Western.tsx":"15","D:\\Jetbrain\\saajaws\\saajcalcengine\\src\\components\\common\\ModalPopup.tsx":"16","D:\\Jetbrain\\saajaws\\saajcalcengine\\src\\util\\validator.ts":"17","D:\\Jetbrain\\saajaws\\saajcalcengine\\src\\components\\GenericInput.tsx":"18"},{"size":500,"mtime":499162500000,"results":"19","hashOfConfig":"20"},{"size":425,"mtime":499162500000,"results":"21","hashOfConfig":"20"},{"size":346,"mtime":1607081613460,"results":"22","hashOfConfig":"20"},{"size":581,"mtime":1614617349822,"results":"23","hashOfConfig":"20"},{"size":4032,"mtime":1636891011656,"results":"24","hashOfConfig":"20"},{"size":7833,"mtime":1636637511932,"results":"25","hashOfConfig":"20"},{"size":7331,"mtime":1617347370059,"results":"26","hashOfConfig":"20"},{"size":1564,"mtime":1614331491687,"results":"27","hashOfConfig":"20"},{"size":1576,"mtime":1636891137361,"results":"28","hashOfConfig":"20"},{"size":441,"mtime":1636691060118,"results":"29","hashOfConfig":"20"},{"size":5020,"mtime":1636637178617,"results":"30","hashOfConfig":"20"},{"size":638,"mtime":1614359220078,"results":"31","hashOfConfig":"20"},{"size":2608,"mtime":1636891092653,"results":"32","hashOfConfig":"20"},{"size":193,"mtime":1636717776751,"results":"33","hashOfConfig":"20"},{"size":4874,"mtime":1617347389967,"results":"34","hashOfConfig":"20"},{"size":1035,"mtime":1614617958653,"results":"35","hashOfConfig":"20"},{"size":721,"mtime":1617344018227,"results":"36","hashOfConfig":"20"},{"size":9413,"mtime":1636891817789,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"k6gavc",{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"56"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"56"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"40"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Jetbrain\\saajaws\\saajcalcengine\\src\\index.tsx",[],["82","83"],"D:\\Jetbrain\\saajaws\\saajcalcengine\\src\\reportWebVitals.ts",[],"D:\\Jetbrain\\saajaws\\saajcalcengine\\src\\App.tsx",[],"D:\\Jetbrain\\saajaws\\saajcalcengine\\src\\aws-exports.js",[],["84","85"],"D:\\Jetbrain\\saajaws\\saajcalcengine\\src\\components\\InputPage.tsx",[],"D:\\Jetbrain\\saajaws\\saajcalcengine\\src\\components\\Lehenga.tsx",["86","87","88","89"],"\r\nimport * as React from \"react\";\r\nimport {CommonProps, LehengaCholiStyle, PatternType} from \"../typedef/style\";\r\nimport {\r\n    Button,\r\n    ButtonGroup,\r\n    Col,\r\n    Container,\r\n    Form,\r\n    Modal,\r\n    Row,\r\n    ToggleButton,\r\n    Tooltip\r\n} from \"react-bootstrap\";\r\nimport {Storage} from \"aws-amplify\"\r\nimport {\r\n    topLength,\r\n    hipSize,\r\n    lehengaLen,\r\n    waistSize\r\n} from \"../util/sizeOptions\";\r\nimport {VimeoVideo} from \"./common/VimeoVideo\";\r\nimport CommonTopFitting from \"./common/CommonTopFitting\";\r\nimport CustomTooltip from \"./common/CutomTooltip\";\r\nimport {tooltipTxt} from \"../util/tooltipText\";\r\nimport {ModalPopup} from \"./common/ModalPopup\";\r\nimport {isInput} from \"../util/validator\";\r\n\r\nexport class Lehenga extends React.Component<CommonProps, any>{\r\n     private values: LehengaCholiStyle|any;\r\n     private msg:string=\"\";\r\n\r\n    constructor(props:any) {\r\n        super(props);\r\n        this.values = {'Pattern': PatternType.LehenhaCholi};\r\n        this.state = {howToMeasure:false, missingInfo:false}\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        // Storage.get(\"BLOUSE.png\").then( (data) => {\r\n        //         this.setState(\r\n        //          {\r\n        //              url1 :  data\r\n        //          })\r\n        //      }\r\n        // ).catch(er => console.log('Error',er))\r\n        // Storage.get(\"SKIRT.png\").then( (data) => {\r\n        //         this.setState(\r\n        //             {\r\n        //                 url2 :  data\r\n        //             })\r\n        //     }\r\n        // ).catch(er => console.log('Error',er))\r\n    }\r\n\r\n    validate(){\r\n        if(this.props.validateUserInfo()){\r\n            const missingList:string[] = isInput(\"Select\", [\"bust\", \"belowBustWaist\", \"shoulderLength\", \"armHoleSize\", \"aroundWaist\"], this.values);\r\n            if( missingList.length > 0){\r\n                this.setState({missingInfo:true})\r\n                this.msg= 'We need measurement detail of '+missingList+\" to give you best fit, please fill it and submit again\"\r\n            }else {\r\n                this.props.postMeasurement(this.values)\r\n            }\r\n        }\r\n    }\r\n\r\n    render(): React.ReactNode {\r\n        return( <Container style={{marginTop:'25px'}}>\r\n\r\n            <Row>\r\n                    <Form style={{ width:'100%'}}>\r\n\r\n                        {/*<h5>Blouse Fitting :*/}\r\n                        {/*    <ButtonGroup toggle className=\"mb-2\">*/}\r\n                        {/*        <ToggleButton*/}\r\n                        {/*            type=\"checkbox\"*/}\r\n                        {/*            variant=\"link\"*/}\r\n                        {/*            checked={this.state.howToMeasure}*/}\r\n                        {/*            value=\"1\"*/}\r\n                        {/*            onChange={(e) => {this.setState({howToMeasure: e.currentTarget.checked}); }}*/}\r\n                        {/*        >*/}\r\n                        {/*            How to measure(Video)?*/}\r\n                        {/*        </ToggleButton>*/}\r\n                        {/*    </ButtonGroup></h5>*/}\r\n\r\n                       <CommonTopFitting values={this.values}/>\r\n\r\n                        {/*    <Form.Group as={Row} style={{ width:'100%'}}>*/}\r\n                        {/*        <Form.Label >Blouse Length &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:<CustomTooltip msg={tooltipTxt.blouseLength}/></Form.Label>*/}\r\n                        {/*        <Col >*/}\r\n                        {/*            <Form.Control as=\"select\"  onChange={e=>{this.values.topLength= e.target.value}}>*/}\r\n                        {/*                {topLength.map( i => <option> {i} </option>)}*/}\r\n                        {/*            </Form.Control>*/}\r\n                        {/*        </Col>*/}\r\n                        {/*    </Form.Group>*/}\r\n\r\n\r\n                        {/*<Form.Group as={Row} style={{ width:'100%'}}>*/}\r\n                        {/*    <Form.Label>Padded &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:*/}\r\n                        {/*        <CustomTooltip msg={tooltipTxt.Empty}/></Form.Label>*/}\r\n                        {/*    <Col >*/}\r\n                        {/*        <Form.Control as=\"select\"  onChange={e=>{this.values.pads= e.target.value}}>*/}\r\n                        {/*        <option>Select</option>*/}\r\n                        {/*        <option>No</option>*/}\r\n                        {/*        <option>Yes</option>*/}\r\n                        {/*    </Form.Control>*/}\r\n                        {/*    </Col>*/}\r\n                        {/*</Form.Group>*/}\r\n\r\n\r\n                        {/*<h5 style={{marginTop:'25px', marginBottom:'20px'}}>Lehenga/Skirt Fitting :*/}\r\n                        {/*    </h5>*/}\r\n\r\n                        <Form.Group as={Row} style={{ width:'100%'}}>\r\n                            <Form.Label>Around Waist Size :<CustomTooltip msg={tooltipTxt.waist}/></Form.Label>\r\n                            <Col >\r\n                                <Form.Control as=\"select\"  onChange={e=>{this.values.aroundWaist= e.target.value}}>\r\n                                    {waistSize.map( i => <option> {i} </option>)}\r\n                                </Form.Control>\r\n                            </Col>\r\n                        </Form.Group>\r\n\r\n                        <Form.Group as={Row} style={{ width:'100%'}}>\r\n                            <Form.Label>Around Hips Size :  <CustomTooltip msg={tooltipTxt.hips}/> </Form.Label>\r\n                            <Col >\r\n                                <Form.Control as=\"select\"  onChange={e=>{this.values.aroundHips= e.target.value}}>\r\n                                    {hipSize.map( i => <option> {i} </option>)}\r\n                                </Form.Control>\r\n                            </Col>\r\n                        </Form.Group>\r\n\r\n\r\n\r\n\r\n\r\n                        {/*<Form.Group as={Row} style={{ width:'100%'}}>*/}\r\n                        {/*    <Form.Label>Lehenga Length &nbsp;&nbsp;&nbsp;:<CustomTooltip msg={tooltipTxt.Empty}/> </Form.Label>*/}\r\n                        {/*    <Col >*/}\r\n                        {/*        <Form.Control as=\"select\"  onChange={e=>{this.values.lehengaLength= e.target.value}}>*/}\r\n                        {/*            {lehengaLen.map( i => <option> {i} </option>)}*/}\r\n                        {/*        </Form.Control>*/}\r\n                        {/*    </Col>*/}\r\n                        {/*</Form.Group>*/}\r\n\r\n\r\n                       <Form.Row>\r\n                            <Form.Label>Add Comments &nbsp;&nbsp;:<CustomTooltip msg={tooltipTxt.Empty}/></Form.Label>\r\n                            <Form.Control as=\"textarea\" rows={2} onChange={e=>{this.values.comments= e.target.value}}/>\r\n                       </Form.Row>\r\n\r\n                        <Button style={{marginTop:'10px', marginRight:'10px'}} variant=\"primary\" type=\"button\" onClick={()=>this.validate()}>\r\n                            Submit\r\n                        </Button>\r\n\r\n                    </Form>\r\n                <Row>\r\n                    {this.state.missingInfo  && <ModalPopup headerMsg=\"Missing Info\" msg={this.msg} action={ ()=>  this.setState({missingInfo:false})} />}\r\n                </Row>\r\n            </Row>\r\n            <Modal show={this.state.howToMeasure} >\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>Reference Video</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body >\r\n                    <VimeoVideo id={'515597635'}/>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"primary\" onClick={()=> this.setState({howToMeasure:false})}>\r\n                        Close\r\n                    </Button>\r\n\r\n                </Modal.Footer>\r\n            </Modal>\r\n\r\n\r\n        </Container>)\r\n    }\r\n}","D:\\Jetbrain\\saajaws\\saajcalcengine\\src\\components\\SalwarKameez.tsx",["90"],"import * as React from \"react\";\r\nimport {Button, ButtonGroup, Col, Container, Form, Modal, Row, ToggleButton} from \"react-bootstrap\";\r\nimport {Storage} from \"aws-amplify\";\r\nimport {CommonProps, PatternType} from \"../typedef/style\";\r\nimport CommonTopFitting from \"./common/CommonTopFitting\";\r\nimport CustomTooltip from \"./common/CutomTooltip\";\r\nimport {tooltipTxt} from \"../util/tooltipText\";\r\nimport {fullToplngth, hipSize,  salwarLen,  waistSize} from \"../util/sizeOptions\";\r\nimport {VimeoVideo} from \"./common/VimeoVideo\";\r\nimport {ModalPopup} from \"./common/ModalPopup\";\r\nimport {isInput} from \"../util/validator\";\r\n\r\nexport class SalwarKameez extends React.Component<CommonProps, any>{\r\n    private values: SalwarKameez|any;\r\n    private msg:string=\"\";\r\n\r\n    constructor(props:any) {\r\n        super(props);\r\n        this.values = {'Pattern': PatternType.SalwarKammez};\r\n        this.state = {howToMeasure:false,  missingInfo:false}\r\n    }\r\n    componentDidMount(): void {\r\n        // Storage.get(\"kameez.jpg\").then( (data) => {\r\n        //         this.setState(\r\n        //             {\r\n        //                 url1 :  data\r\n        //             })\r\n        //     }\r\n        // ).catch(er => console.log('Error',er))\r\n        // Storage.get(\"salwar.jpg\").then( (data) => {\r\n        //         this.setState(\r\n        //             {\r\n        //                 url2 :  data\r\n        //             })\r\n        //     }\r\n        // ).catch(er => console.log('Error',er))\r\n    }\r\n    validate(){\r\n        if(this.props.validateUserInfo()){\r\n            const missingList:string[] = isInput(\"Select\", [\"bust\", \"belowBustWaist\", \"shoulderLength\", \"armHoleSize\", \"aroundWaist\"], this.values);\r\n            if( missingList.length > 0){\r\n                this.setState({missingInfo:true})\r\n                this.msg= 'We need measurement detail of '+missingList+\" to give you best fit, please fill it and submit again\"\r\n            }else {\r\n                this.props.postMeasurement(this.values)\r\n            }\r\n        }\r\n    }\r\n\r\n    render(): React.ReactNode {\r\n       return (\r\n           <Container style={{marginTop:'25px'}}>\r\n               <Row>\r\n                       <Form style={{ width:'100%'}}>\r\n                           <h5>Kameez Fitting (in inches):\r\n                               <ButtonGroup toggle className=\"mb-2\">\r\n                                   <ToggleButton\r\n                                       type=\"checkbox\"\r\n                                       variant=\"link\"\r\n                                       checked={this.state.howToMeasure}\r\n                                       value=\"1\"\r\n                                       onChange={(e) => {this.setState({howToMeasure: e.currentTarget.checked}); }}\r\n                                   >\r\n                                       How to measure?\r\n                                   </ToggleButton>\r\n                               </ButtonGroup>\r\n                           </h5>\r\n                           <CommonTopFitting values={this.values}/>\r\n\r\n                           <Form.Group as={Row} style={{ width:'100%'}}>\r\n                               <Form.Label >Kurti Length &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:<CustomTooltip msg={tooltipTxt.Empty}/></Form.Label>\r\n                               <Col >\r\n                                   <Form.Control as=\"select\"  onChange={e=>{this.values.topLength= e.target.value}}>\r\n                                       {fullToplngth.map( i => <option> {i} </option>)}\r\n                                   </Form.Control>\r\n                               </Col>\r\n                           </Form.Group>\r\n\r\n                           <h5 style={{marginTop:'25px'}}>Salwar Fitting (in inches):\r\n                            </h5>\r\n                           <Form.Group as={Row} style={{ width:'100%'}}>\r\n                               <Form.Label>Around Hips Size :  <CustomTooltip msg={tooltipTxt.hips}/> </Form.Label>\r\n                               <Col >\r\n                                   <Form.Control as=\"select\"  onChange={e=>{this.values.aroundHips= e.target.value}}>\r\n                                       {hipSize.map( i => <option> {i} </option>)}\r\n                                   </Form.Control>\r\n                               </Col>\r\n                           </Form.Group>\r\n\r\n\r\n                           <Form.Group as={Row} style={{ width:'100%'}}>\r\n                               <Form.Label>Around Waist Size :<CustomTooltip msg={tooltipTxt.waist}/></Form.Label>\r\n                               <Col >\r\n                                   <Form.Control as=\"select\"  onChange={e=>{this.values.aroundWaist= e.target.value}}>\r\n                                       {waistSize.map( i => <option> {i} </option>)}\r\n                                   </Form.Control>\r\n                               </Col>\r\n                           </Form.Group>\r\n\r\n\r\n                           <Form.Group as={Row} style={{ width:'100%'}}>\r\n                               <Form.Label>Salwar Length &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: <CustomTooltip msg={tooltipTxt.Empty}/> </Form.Label>\r\n                               <Col >\r\n                                   <Form.Control as=\"select\"  onChange={e=>{this.values.outseamLength= e.target.value}}>\r\n                                       {salwarLen.map( i => <option> {i} </option>)}\r\n                                   </Form.Control>\r\n                               </Col>\r\n                           </Form.Group>\r\n\r\n\r\n                           <Form.Row>\r\n                               <Form.Label>Add Comments &nbsp;&nbsp;:<CustomTooltip msg={tooltipTxt.Empty}/></Form.Label>\r\n                               <Form.Control as=\"textarea\" rows={2} onChange={e=>{this.values.comments= e.target.value}}/>\r\n                           </Form.Row>\r\n\r\n                           <Button style={{marginTop:'10px', marginRight:'10px'}} variant=\"primary\" type=\"button\" onClick={()=>this.validate()}>\r\n                               Submit\r\n                           </Button>\r\n\r\n                       </Form>\r\n\r\n                   <Row>\r\n                       {this.state.missingInfo  && <ModalPopup headerMsg=\"Missing Info\" msg={this.msg} action={ ()=>  this.setState({missingInfo:false})} />}\r\n                   </Row>\r\n               </Row>\r\n\r\n               <Modal show={this.state.howToMeasure } >\r\n                   <Modal.Header closeButton>\r\n                       <Modal.Title>Kammez Salwar measurement video</Modal.Title>\r\n                   </Modal.Header>\r\n                   <Modal.Body>\r\n                       {/*{ this.state.showKameez && this.state.url1 != '' && <img style={{height:'auto',width:'50%'}} src={ this.state.url1 }/>}*/}\r\n                       {/*{ this.state.showSalwar && this.state.url2 != '' && <img style={{height:'auto',width:'100%'}} src={ this.state.url2 }/>}*/}\r\n                       <VimeoVideo id={'515597838'}/>\r\n                   </Modal.Body>\r\n                   <Modal.Footer>\r\n                       <Button variant=\"primary\" onClick={()=> this.setState({howToMeasure:false})}>\r\n                           Close\r\n                       </Button>\r\n\r\n                   </Modal.Footer>\r\n               </Modal>\r\n\r\n           </Container>\r\n       )\r\n    }\r\n\r\n}",["91","92"],"D:\\Jetbrain\\saajaws\\saajcalcengine\\src\\typedef\\style.ts",[],["93","94"],"D:\\Jetbrain\\saajaws\\saajcalcengine\\src\\util\\sizeOptions.ts",[],"D:\\Jetbrain\\saajaws\\saajcalcengine\\src\\components\\common\\VimeoVideo.tsx",[],"D:\\Jetbrain\\saajaws\\saajcalcengine\\src\\components\\common\\CommonTopFitting.tsx",["95","96","97","98","99","100","101","102"],"D:\\Jetbrain\\saajaws\\saajcalcengine\\src\\components\\common\\CutomTooltip.tsx",[],"D:\\Jetbrain\\saajaws\\saajcalcengine\\src\\util\\tooltipText.ts",[],"D:\\Jetbrain\\saajaws\\saajcalcengine\\src\\util\\nameUtil.ts",[],"D:\\Jetbrain\\saajaws\\saajcalcengine\\src\\components\\Western.tsx",["103"],"\r\nimport * as React from \"react\";\r\nimport { CommonProps, PatternType, WesternStyle} from \"../typedef/style\";\r\nimport {Button, ButtonGroup, Col, Container, Form, Modal, Row, ToggleButton} from \"react-bootstrap\";\r\nimport {Storage} from \"aws-amplify\"\r\nimport CommonTopFitting from \"./common/CommonTopFitting\";\r\nimport CustomTooltip from \"./common/CutomTooltip\";\r\nimport {tooltipTxt} from \"../util/tooltipText\";\r\nimport {fullToplngth} from \"../util/sizeOptions\";\r\nimport {VimeoVideo} from \"./common/VimeoVideo\";\r\nimport {isInput} from \"../util/validator\";\r\nimport {ModalPopup} from \"./common/ModalPopup\";\r\n\r\n\r\nexport class Western extends React.Component<CommonProps, any>{\r\n    private values:WesternStyle|any;\r\n    private msg:string=\"\";\r\n\r\n    constructor(props:any) {\r\n        super(props);\r\n        this.values = {'Pattern': PatternType.Western};\r\n        this.state = {howToMeasure:false}\r\n\r\n        }\r\n\r\n    componentDidMount(): void {\r\n        // Storage.get(\"BLOUSE.png\").then( (data) => {\r\n        //         this.setState(\r\n        //             {\r\n        //                 url1 :  data\r\n        //             })\r\n        //     }\r\n        // ).catch(er => console.log('Error',er))\r\n    }\r\n    validate(){\r\n        if(this.props.validateUserInfo()){\r\n            const missingList:string[] = isInput(\"Select\", [\"bust\", \"belowBustWaist\", \"shoulderLength\", \"armHoleSize\"], this.values);\r\n            if( missingList.length > 0){\r\n                this.setState({missingInfo:true})\r\n                this.msg= 'We need measurement detail of '+missingList+\" to give you best fit, please fill it and submit again\"\r\n            }else {\r\n                this.props.postMeasurement(this.values)\r\n            }\r\n        }\r\n    }\r\n\r\n    render(): React.ReactNode {\r\n        return (\r\n            <Container style={{marginTop:'15px'}}>\r\n                <Row>\r\n                    <Form style={{ width:'100%'}}>\r\n                        <h5>Western Dress Fitting:\r\n                            <ButtonGroup toggle className=\"mb-2\">\r\n                                <ToggleButton\r\n                                    type=\"checkbox\"\r\n                                    variant=\"link\"\r\n                                    checked={this.state.howToMeasure}\r\n                                    value=\"1\"\r\n                                    onChange={(e) => {this.setState({howToMeasure: e.currentTarget.checked}); }}>\r\n                                    How to measure?\r\n                                </ToggleButton>\r\n                            </ButtonGroup>\r\n                        </h5>\r\n                        <CommonTopFitting values={this.values}/>\r\n\r\n                        <Form.Group as={Row} style={{ width:'100%'}}>\r\n                            <Form.Label>Dress Length &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:<CustomTooltip msg={tooltipTxt.Empty}/> </Form.Label>\r\n                            <Col >\r\n                                <Form.Control as=\"select\"  onChange={e=>{this.values.dressLength= e.target.value}}>\r\n                                    {fullToplngth.map( i => <option> {i} </option>)}\r\n                                </Form.Control>\r\n                            </Col>\r\n                        </Form.Group>\r\n\r\n\r\n                        <Form.Row>\r\n                            <Form.Label>Add Comments &nbsp;&nbsp;:<CustomTooltip msg={tooltipTxt.Empty}/></Form.Label>\r\n                            <Form.Control as=\"textarea\" rows={2} onChange={e=>{this.values.comments= e.target.value}}/>\r\n                        </Form.Row>\r\n\r\n                        <Button style={{marginTop:'10px', marginRight:'10px'}} variant=\"primary\" type=\"button\" onClick={()=>this.validate()}>\r\n                            Submit\r\n                        </Button>\r\n\r\n                    </Form>\r\n\r\n                    <Row>\r\n                        {this.state.missingInfo  && <ModalPopup headerMsg=\"Missing Info\" msg={this.msg} action={ ()=>  this.setState({missingInfo:false})} />}\r\n                    </Row>\r\n                </Row>\r\n\r\n                <Modal show={this.state.howToMeasure} >\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title>Blouse Measurement Video</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                        {/*{ this.state.howToMeasure && this.state.url1 != '' && <img style={{height:'auto',width:'70%'}} src={ this.state.url1 }/>}*/}\r\n                        <VimeoVideo id={'515596882'}/>\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                        <Button variant=\"primary\" onClick={()=> this.setState({howToMeasure:false})}>\r\n                            Close\r\n                        </Button>\r\n\r\n                    </Modal.Footer>\r\n                </Modal>\r\n            </Container>\r\n        )\r\n    }\r\n}","D:\\Jetbrain\\saajaws\\saajcalcengine\\src\\components\\common\\ModalPopup.tsx",[],"D:\\Jetbrain\\saajaws\\saajcalcengine\\src\\util\\validator.ts",["104","105"],"export function isEmail(val:string):boolean {\r\n    let regEmail = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n    if(!regEmail.test(val)){\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\n\r\nexport function isPhoneNumber(inputtxt:string)\r\n{\r\n    var phoneno = /^\\d*$/;\r\n    if(phoneno.test(inputtxt)) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\nexport function isInput(value:string, props: string[], obj:any):string[] {\r\n    let missing:string[] = [];\r\n    props.forEach(prop => {\r\n        if( !obj[prop] || obj[prop] === value)\r\n            missing.push(prop)\r\n    })\r\n    return missing;\r\n}\r\n\r\n","D:\\Jetbrain\\saajaws\\saajcalcengine\\src\\components\\GenericInput.tsx",[],{"ruleId":"106","replacedBy":"107"},{"ruleId":"108","replacedBy":"109"},{"ruleId":"106","replacedBy":"107"},{"ruleId":"108","replacedBy":"109"},{"ruleId":"110","severity":1,"message":"111","line":13,"column":5,"nodeType":"112","messageId":"113","endLine":13,"endColumn":12},{"ruleId":"110","severity":1,"message":"114","line":15,"column":9,"nodeType":"112","messageId":"113","endLine":15,"endColumn":16},{"ruleId":"110","severity":1,"message":"115","line":17,"column":5,"nodeType":"112","messageId":"113","endLine":17,"endColumn":14},{"ruleId":"110","severity":1,"message":"116","line":19,"column":5,"nodeType":"112","messageId":"113","endLine":19,"endColumn":15},{"ruleId":"110","severity":1,"message":"114","line":3,"column":9,"nodeType":"112","messageId":"113","endLine":3,"endColumn":16},{"ruleId":"106","replacedBy":"117"},{"ruleId":"108","replacedBy":"118"},{"ruleId":"106","replacedBy":"119"},{"ruleId":"108","replacedBy":"120"},{"ruleId":"110","severity":1,"message":"121","line":2,"column":9,"nodeType":"112","messageId":"113","endLine":2,"endColumn":15},{"ruleId":"110","severity":1,"message":"122","line":2,"column":17,"nodeType":"112","messageId":"113","endLine":2,"endColumn":28},{"ruleId":"110","severity":1,"message":"123","line":2,"column":41,"nodeType":"112","messageId":"113","endLine":2,"endColumn":55},{"ruleId":"110","severity":1,"message":"124","line":2,"column":62,"nodeType":"112","messageId":"113","endLine":2,"endColumn":74},{"ruleId":"110","severity":1,"message":"111","line":2,"column":76,"nodeType":"112","messageId":"113","endLine":2,"endColumn":83},{"ruleId":"110","severity":1,"message":"125","line":8,"column":5,"nodeType":"112","messageId":"113","endLine":8,"endColumn":17},{"ruleId":"110","severity":1,"message":"115","line":8,"column":19,"nodeType":"112","messageId":"113","endLine":8,"endColumn":28},{"ruleId":"110","severity":1,"message":"126","line":9,"column":5,"nodeType":"112","messageId":"113","endLine":9,"endColumn":19},{"ruleId":"110","severity":1,"message":"114","line":5,"column":9,"nodeType":"112","messageId":"113","endLine":5,"endColumn":16},{"ruleId":"127","severity":1,"message":"128","line":2,"column":30,"nodeType":"129","messageId":"130","endLine":2,"endColumn":31,"suggestions":"131"},{"ruleId":"127","severity":1,"message":"128","line":2,"column":55,"nodeType":"129","messageId":"130","endLine":2,"endColumn":56,"suggestions":"132"},"no-native-reassign",["133"],"no-negated-in-lhs",["134"],"@typescript-eslint/no-unused-vars","'Tooltip' is defined but never used.","Identifier","unusedVar","'Storage' is defined but never used.","'topLength' is defined but never used.","'lehengaLen' is defined but never used.",["133"],["134"],["133"],["134"],"'Button' is defined but never used.","'ButtonGroup' is defined but never used.","'OverlayTrigger' is defined but never used.","'ToggleButton' is defined but never used.","'sleeveLength' is defined but never used.","'tucksPointSize' is defined but never used.","no-useless-escape","Unnecessary escape character: \\[.","Literal","unnecessaryEscape",["135","136"],["137","138"],"no-global-assign","no-unsafe-negation",{"messageId":"139","fix":"140","desc":"141"},{"messageId":"142","fix":"143","desc":"144"},{"messageId":"139","fix":"145","desc":"141"},{"messageId":"142","fix":"146","desc":"144"},"removeEscape",{"range":"147","text":"148"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"149","text":"150"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"151","text":"148"},{"range":"152","text":"150"},[76,77],"",[76,76],"\\",[101,102],[101,101]]