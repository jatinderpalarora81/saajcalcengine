[{"D:\\Jetbrain\\saajaws\\saajcalcengine\\src\\index.tsx":"1","D:\\Jetbrain\\saajaws\\saajcalcengine\\src\\reportWebVitals.ts":"2","D:\\Jetbrain\\saajaws\\saajcalcengine\\src\\App.tsx":"3","D:\\Jetbrain\\saajaws\\saajcalcengine\\src\\aws-exports.js":"4","D:\\Jetbrain\\saajaws\\saajcalcengine\\src\\components\\InputPage.tsx":"5","D:\\Jetbrain\\saajaws\\saajcalcengine\\src\\components\\Lehenga.tsx":"6","D:\\Jetbrain\\saajaws\\saajcalcengine\\src\\components\\SalwarKameez.tsx":"7","D:\\Jetbrain\\saajaws\\saajcalcengine\\src\\components\\Blouse.tsx":"8","D:\\Jetbrain\\saajaws\\saajcalcengine\\src\\util\\sizecalcutil.ts":"9","D:\\Jetbrain\\saajaws\\saajcalcengine\\src\\util\\measurementData.ts":"10","D:\\Jetbrain\\saajaws\\saajcalcengine\\src\\typedef\\style.ts":"11","D:\\Jetbrain\\saajaws\\saajcalcengine\\src\\util\\percentageCalc.ts":"12","D:\\Jetbrain\\saajaws\\saajcalcengine\\src\\util\\sizeComparator.ts":"13"},{"size":500,"mtime":499162500000,"results":"14","hashOfConfig":"15"},{"size":425,"mtime":499162500000,"results":"16","hashOfConfig":"15"},{"size":346,"mtime":1607081613460,"results":"17","hashOfConfig":"15"},{"size":795,"mtime":1612346461427,"results":"18","hashOfConfig":"15"},{"size":7044,"mtime":1611314351584,"results":"19","hashOfConfig":"15"},{"size":6497,"mtime":1607604260713,"results":"20","hashOfConfig":"15"},{"size":7359,"mtime":1607510523986,"results":"21","hashOfConfig":"15"},{"size":4303,"mtime":1607604606040,"results":"22","hashOfConfig":"15"},{"size":1710,"mtime":1607938181803,"results":"23","hashOfConfig":"15"},{"size":2686,"mtime":1607606465857,"results":"24","hashOfConfig":"15"},{"size":1357,"mtime":1607672210222,"results":"25","hashOfConfig":"15"},{"size":346,"mtime":1607674442670,"results":"26","hashOfConfig":"15"},{"size":1235,"mtime":1607938181803,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"k6gavc",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"30"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"30"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"30"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"30"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"30"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"30"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"D:\\Jetbrain\\saajaws\\saajcalcengine\\src\\index.tsx",[],["62","63"],"D:\\Jetbrain\\saajaws\\saajcalcengine\\src\\reportWebVitals.ts",[],"D:\\Jetbrain\\saajaws\\saajcalcengine\\src\\App.tsx",[],"D:\\Jetbrain\\saajaws\\saajcalcengine\\src\\aws-exports.js",[],"D:\\Jetbrain\\saajaws\\saajcalcengine\\src\\components\\InputPage.tsx",["64","65","66","67","68"],"import * as React from 'react';\r\nimport {Accordion, Button, Card, Col, Container, Form, FormControl, Image, InputGroup, Row} from \"react-bootstrap\";\r\nimport {API} from 'aws-amplify'\r\nimport {Lehenga} from \"./Lehenga\";\r\nimport {Storage} from \"aws-amplify\"\r\nimport {SalwarKameez} from \"./SalwarKameez\";\r\nimport {Blouse} from \"./Blouse\";\r\nimport {Info} from \"../typedef/style\";\r\n\r\ninterface InputState {\r\n    fileUrl:string\r\n}\r\n\r\nexport class InputPage extends React.Component<any, InputState>{\r\n\r\n   private values:Info;\r\n\r\n    constructor(props:any) {\r\n        super(props);\r\n        this.state = {fileUrl:''};\r\n        this.values = {\r\n            name:\"\",\r\n            email:\"\",\r\n            phone:\"\"\r\n        }\r\n    }\r\n    componentDidMount(): void {\r\n        Storage.get(\"saaj3.4.jpg\").then(data =>{\r\n            this.setState(\r\n                {\r\n                    fileUrl :  data.toString()\r\n                })\r\n        })\r\n    }\r\n\r\n    async printit(){\r\n        const r = await API.post('sizeapi', '/size', {body: {name:\"Jatin\"}});\r\n        console.log(r)\r\n        alert(r.body.name);\r\n    }\r\n\r\n    getInfo(){\r\n        return this.values;\r\n    }\r\n    validateInfo():boolean{\r\n        if(this.values.email=== \"\" && this.values.phone === \"\"){\r\n            alert(\" Please provide your email id or phone number, this will help us to serve you better.\")\r\n            return false;\r\n        }\r\n        this.printit().then((i)=> console.log('Send'));\r\n        return true;\r\n    }\r\n\r\n    render(){\r\n        // this.printit();\r\n        return (<Container  style={{width:'80vw', height:'90vh'}}>\r\n            <Row>\r\n                { this.state.fileUrl != '' && <img style={{height:'auto',width:'300px'}} src={ this.state.fileUrl }/>}\r\n            </Row>\r\n            <Row style={{marginTop:'15px', marginBottom:'20px'}}>\r\n                        <Form>\r\n                            <Form.Row className=\"align-items-right\">\r\n                                <Col sm={3} className=\"my-1\">\r\n                                    <Form.Label>Enter Name</Form.Label>\r\n                                    <Form.Control type=\"text\" placeholder=\"Name\"\r\n                                                  onChange={e=>{this.values.name= e.target.value}}\r\n                                    />\r\n                                </Col>\r\n                                <Col sm={3} className=\"my-1\">\r\n                                    <Form.Label>Email Id</Form.Label>\r\n                                    <Form.Control type=\"email\" placeholder=\"email\"\r\n                                                  onChange={e=>{this.values.email= e.target.value}}\r\n                                    />\r\n                                </Col>\r\n                                <Col xs=\"auto\" className=\"my-1\">\r\n                                    <Form.Label>Phone Num</Form.Label>\r\n                                    <Form.Control type=\"test\" placeholder=\"Phone\"\r\n                                                  onChange={e=>{this.values.phone= e.target.value}}\r\n                                    />\r\n                                </Col>\r\n                            </Form.Row>\r\n                        </Form>\r\n            </Row>\r\n            <Row ><h3> Choose a Pattern </h3>\r\n                            <Accordion defaultActiveKey=\"-1\" style={{width:'80vw', marginBottom:'20px'}} >\r\n                                <Card>\r\n                                    <Card.Header>\r\n                                        <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"0\">\r\n                                            Lehenga\r\n                                        </Accordion.Toggle>\r\n                                    </Card.Header>\r\n                                    <Accordion.Collapse eventKey=\"0\">\r\n                                        <Card.Body><Lehenga getInfo={() => this.getInfo()} validateInfo={()=> this.validateInfo()}/></Card.Body>\r\n                                    </Accordion.Collapse>\r\n                                </Card>\r\n                                <Card>\r\n                                    <Card.Header>\r\n                                        <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"1\">\r\n                                            Blouse\r\n                                        </Accordion.Toggle>\r\n                                    </Card.Header>\r\n                                    <Accordion.Collapse eventKey=\"1\">\r\n                                        <Card.Body><Blouse getInfo={() => this.getInfo()} validateInfo={()=> this.validateInfo()}/></Card.Body>\r\n                                    </Accordion.Collapse>\r\n                                </Card>\r\n                                <Card>\r\n                                    <Card.Header>\r\n                                        <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"2\">\r\n                                            Salwar Kameez\r\n                                        </Accordion.Toggle>\r\n                                    </Card.Header>\r\n                                    <Accordion.Collapse eventKey=\"2\">\r\n                                        <Card.Body> <SalwarKameez getInfo={() => this.getInfo()} validateInfo={()=> this.validateInfo()}/></Card.Body>\r\n                                    </Accordion.Collapse>\r\n                                </Card>\r\n                            </Accordion>\r\n            </Row>\r\n                        {/*    <Form.Group controlId=\"n1\">*/}\r\n                        {/*        <Form.Label style={{marginTop:'20px'}}> <h5>Choose your Pattern: </h5></Form.Label>*/}\r\n                        {/*        <Form.Control style={{marginTop:'20px'}} as=\"select\"  className=\"my-1 mr-sm-2\"*/}\r\n                        {/*                      id=\"inlineFormCustomSelectPref\"*/}\r\n                        {/*                      custom*/}\r\n                        {/*                      onChange={e=>{this.setState({selection : e.target.value})}}*/}\r\n                        {/*        >*/}\r\n                        {/*            <option value=\"0\">Choose an option..</option>*/}\r\n                        {/*            <option value=\"1\">Lehenga</option>*/}\r\n                        {/*            <option value=\"2\">Salwar Kameez</option>*/}\r\n                        {/*            <option value=\"3\">Blouse</option>*/}\r\n                        {/*        </Form.Control>*/}\r\n                        {/*    </Form.Group>*/}\r\n                        {/*</Form>*/}\r\n\r\n                    {/*</div>*/}\r\n\r\n            {/*<Row>*/}\r\n            {/*    {this.state.selection === '1' ? (<Lehenga/>) : this.state.selection === '2' ? (<SalwarKameez/>) : this.state.selection === '3' ? <Blouse/> : <div/>}*/}\r\n\r\n            {/*</Row>*/}\r\n            <Row>\r\n                <Button style={{marginTop:'10px'}}variant=\"secondary\" type=\"button\" onClick={()=>window.close()}>\r\n                    Close\r\n                </Button>\r\n            </Row>\r\n        </Container>);\r\n    }\r\n\r\n}","D:\\Jetbrain\\saajaws\\saajcalcengine\\src\\components\\Lehenga.tsx",["69","70","71","72"],"\r\nimport * as React from \"react\";\r\nimport {CommonPros, LehengaCholiStyle} from \"../typedef/style\";\r\nimport {Button, ButtonGroup, Col, Container, Form, Modal, Row, ToggleButton} from \"react-bootstrap\";\r\nimport {Storage} from \"aws-amplify\"\r\nimport {calculateLehengaSize} from \"../util/sizecalcutil\";\r\n\r\n\r\nexport class Lehenga extends React.Component<CommonPros, any>{\r\n     private values: LehengaCholiStyle|any;\r\n\r\n    constructor(props:any) {\r\n        super(props);\r\n        this.values = {};\r\n        this.state = {showCholi:false, showLehanga:false}\r\n\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        Storage.get(\"BLOUSE.png\").then( (data) => {\r\n                this.setState(\r\n                 {\r\n                     url1 :  data\r\n                 })\r\n             }\r\n        ).catch(er => console.log('Error',er))\r\n        Storage.get(\"SKIRT.png\").then( (data) => {\r\n                this.setState(\r\n                    {\r\n                        url2 :  data\r\n                    })\r\n            }\r\n        ).catch(er => console.log('Error',er))\r\n    }\r\n\r\n    validate(){\r\n        if(this.props.validateInfo()){\r\n            alert(\"Your reccomended size is : \"+calculateLehengaSize(this.values));\r\n        }\r\n    }\r\n\r\n    render(): React.ReactNode {\r\n        return( <Container style={{marginTop:'25px'}}>\r\n            <Row>\r\n                    <Form>\r\n                        <h5>Choli Fitting (in inches):\r\n                        <ButtonGroup toggle className=\"mb-2\">\r\n                            <ToggleButton\r\n                                type=\"checkbox\"\r\n                                variant=\"link\"\r\n                                checked={this.state.showCholi}\r\n                                value=\"1\"\r\n                                onChange={(e) => {this.setState({showCholi: e.currentTarget.checked, showLehanga: false}); }}\r\n                            >\r\n                                How to measure?\r\n                            </ToggleButton>\r\n                        </ButtonGroup></h5>\r\n                        <Form.Row className=\"align-items-center\">\r\n                            <Col >\r\n                                <Form.Label>Bust Size:</Form.Label>\r\n                                <Form.Control type=\"number\"\r\n                                              onChange={e=>{this.values.bust= e.target.value}}\r\n                                />\r\n                            </Col>\r\n                            <Col >\r\n                                <Form.Label>Shoulder Length:</Form.Label>\r\n                                <Form.Control type=\"number\" onChange={e=>{this.values.shoulderLength= e.target.value}}\r\n                                />\r\n\r\n                            </Col>\r\n                            <Col>\r\n                                <Form.Label>Blouse Length: </Form.Label>\r\n                                <Form.Control type=\"number\"  onChange={e=>{this.values.blouseLength= e.target.value}}\r\n                                />\r\n\r\n                            </Col>\r\n                            <Col>\r\n                                <Form.Label>Arm Hole Size: </Form.Label>\r\n                                <Form.Control type=\"number\"   onChange={e=>{this.values.armHoleSize= e.target.value}}\r\n                                />\r\n\r\n                            </Col>\r\n                            <Col>\r\n                                <Form.Label>Around Arm Size:</Form.Label>\r\n                                <Form.Control type=\"number\" onChange={e=>{this.values.aroundArm= e.target.value}}\r\n                                />\r\n                            </Col>\r\n                        </Form.Row>\r\n\r\n                        <h5 style={{marginTop:'25px'}}>Lehenga Fitting (in inches):\r\n                            <ButtonGroup toggle >\r\n                            <ToggleButton\r\n                                type=\"checkbox\"\r\n                                variant=\"link\"\r\n                                checked={this.state.showLehanga}\r\n                                value=\"1\"\r\n                                onChange={(e) => {this.setState({showCholi: false, showLehanga: e.currentTarget.checked});}}\r\n                            >\r\n                                How to measure?\r\n                            </ToggleButton> </ButtonGroup>\r\n                            </h5>\r\n                        <Form.Row className=\"align-items-center\">\r\n                            <Col >\r\n                                <Form.Label>Around Hips Size: </Form.Label>\r\n                                <Form.Control type=\"number\"  onChange={e=>{this.values.aroundHips= e.target.value}}\r\n                                />\r\n                            </Col>\r\n                            <Col >\r\n                                <Form.Label>Lehenga Length: </Form.Label>\r\n                                <Form.Control type=\"number\"  onChange={e=>{this.values.lehengaLength= e.target.value}}\r\n                                />\r\n                            </Col>\r\n                            <Col >\r\n                                <Form.Label>Around Waist Size: </Form.Label>\r\n                                <Form.Control type=\"number\"  onChange={e=>{this.values.aroundWaist= e.target.value}}\r\n                                />\r\n                            </Col>\r\n                        </Form.Row>\r\n\r\n                        <Button style={{marginTop:'10px', marginRight:'10px'}} variant=\"primary\" type=\"button\" onClick={()=>this.validate()}>\r\n                            Submit\r\n                        </Button>\r\n\r\n\r\n                    </Form>\r\n            </Row>\r\n            <Modal show={this.state.showCholi || this.state.showLehanga} >\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>Reference Image</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    { this.state.showCholi && this.state.url1 != '' && <img style={{height:'auto',width:'100%'}} src={ this.state.url1 }/>}\r\n                    { this.state.showLehanga && this.state.url2 != '' && <img style={{height:'auto',width:'100%'}} src={ this.state.url2 }/>}\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"primary\" onClick={()=> this.setState({showCholi:false, showLehanga:false})}>\r\n                        Close\r\n                    </Button>\r\n\r\n                </Modal.Footer>\r\n            </Modal>\r\n        </Container>)\r\n    }\r\n}","D:\\Jetbrain\\saajaws\\saajcalcengine\\src\\components\\SalwarKameez.tsx",["73","74","75","76"],"import * as React from \"react\";\r\nimport {Button, ButtonGroup, Col, Container, Form, Modal, Row, ToggleButton} from \"react-bootstrap\";\r\nimport {Storage} from \"aws-amplify\";\r\nimport {CommonPros} from \"../typedef/style\";\r\n\r\nexport class SalwarKameez extends React.Component<CommonPros, any>{\r\n    private values: any;\r\n\r\n    constructor(props:any) {\r\n        super(props);\r\n        this.values = {};\r\n        this.state = {showKameez:false, showSalwar:false}\r\n    }\r\n    componentDidMount(): void {\r\n        Storage.get(\"kameez.jpg\").then( (data) => {\r\n                this.setState(\r\n                    {\r\n                        url1 :  data\r\n                    })\r\n            }\r\n        ).catch(er => console.log('Error',er))\r\n        Storage.get(\"salwar.jpg\").then( (data) => {\r\n                this.setState(\r\n                    {\r\n                        url2 :  data\r\n                    })\r\n            }\r\n        ).catch(er => console.log('Error',er))\r\n    }\r\n\r\n\r\n    render(): React.ReactNode {\r\n       return (\r\n           <Container style={{marginTop:'25px'}}>\r\n               <Row>\r\n                       <Form>\r\n                           <h5>Kameez Fitting (in inches):\r\n                               <ButtonGroup toggle className=\"mb-2\">\r\n                                   <ToggleButton\r\n                                       type=\"checkbox\"\r\n                                       variant=\"link\"\r\n                                       checked={this.state.showKameez}\r\n                                       value=\"1\"\r\n                                       onChange={(e) => {this.setState({showKameez: e.currentTarget.checked, showSalwar: false}); }}\r\n                                   >\r\n                                       How to measure?\r\n                                   </ToggleButton>\r\n                               </ButtonGroup>\r\n                           </h5>\r\n\r\n                           <Form.Row className=\"align-items-center\">\r\n                               <Col>\r\n                                   <Form.Label>Bust: </Form.Label>\r\n                                   <Form.Control type=\"number\"\r\n                                                 onChange={e=>{this.values.bust= e.target.value}}\r\n                                   />\r\n                               </Col>\r\n                               <Col>\r\n                                   <Form.Label>Shoulder Length</Form.Label>\r\n                                   <Form.Control type=\"number\" onChange={e=>{this.values.shoulderLength= e.target.value}}\r\n                                   />\r\n\r\n                               </Col>\r\n                               <Col>\r\n                                   <Form.Label>kameez Length: </Form.Label>\r\n                                   <Form.Control type=\"number\"  onChange={e=>{this.values.kameezLength= e.target.value}}\r\n                                   />\r\n\r\n                               </Col>\r\n                               <Col>\r\n                                   <Form.Label>Arm Hole Size: </Form.Label>\r\n                                   <Form.Control type=\"number\"    onChange={e=>{this.values.armHoleSize= e.target.value}}\r\n                                   />\r\n\r\n                               </Col>\r\n                               <Col>\r\n                                   <Form.Label>AroundArm</Form.Label>\r\n                                   <Form.Control type=\"number\" onChange={e=>{this.values.aroundArm= e.target.value}}\r\n                                   />\r\n                               </Col>\r\n                           </Form.Row>\r\n\r\n                           <h5 style={{marginTop:'25px'}}>Salwar Fitting (in inches):\r\n                               <ButtonGroup toggle className=\"mb-2\">\r\n                                   <ToggleButton\r\n                                       type=\"checkbox\"\r\n                                       variant=\"link\"\r\n                                       checked={this.state.showSalwar}\r\n                                       value=\"1\"\r\n                                       onChange={(e) => {this.setState({showSalwar: e.currentTarget.checked, showKameez: false}); }}\r\n                                   >\r\n                                       How to measure?\r\n                                   </ToggleButton>\r\n                               </ButtonGroup>\r\n                           </h5>\r\n                           <Form.Row className=\"align-items-center\">\r\n                               <Col>\r\n                                   <Form.Label>Around Thigh Size: </Form.Label>\r\n                                   <Form.Control type=\"number\"   onChange={e=>{this.values.aroundThigh= e.target.value}}\r\n                                   />\r\n                               </Col>\r\n                               <Col>\r\n                                   <Form.Label>Salwar Length: </Form.Label>\r\n                                   <Form.Control type=\"number\"    onChange={e=>{this.values.salwarLength= e.target.value}}\r\n                                   />\r\n                               </Col>\r\n                               <Col>\r\n                                   <Form.Label>Around Calf Length: </Form.Label>\r\n                                   <Form.Control type=\"number\"  onChange={e=>{this.values.aroundCalf= e.target.value}}\r\n                                   />\r\n                               </Col>\r\n                               <Col>\r\n                                   <Form.Label>Around Knee Length: </Form.Label>\r\n                                   <Form.Control type=\"number\"   onChange={e=>{this.values.aroundKnee= e.target.value}}\r\n                                   />\r\n                               </Col>\r\n                               <Col>\r\n                                   <Form.Label>Around Waist Size: </Form.Label>\r\n                                   <Form.Control type=\"number\"   onChange={e=>{this.values.aroundWaist= e.target.value}}\r\n                                   />\r\n                               </Col>\r\n\r\n                           </Form.Row>\r\n\r\n                           <Button style={{marginTop:'10px', marginRight:'10px'}} variant=\"primary\" type=\"button\" onClick={()=>alert(\"You reccomended size is : Free Size\")}>\r\n                               Submit\r\n                           </Button>\r\n\r\n                       </Form>\r\n               </Row>\r\n\r\n               <Modal show={this.state.showKameez || this.state.showSalwar} >\r\n                   <Modal.Header closeButton>\r\n                       <Modal.Title>Kammez Salwar Image</Modal.Title>\r\n                   </Modal.Header>\r\n                   <Modal.Body>\r\n                       { this.state.showKameez && this.state.url1 != '' && <img style={{height:'auto',width:'50%'}} src={ this.state.url1 }/>}\r\n                       { this.state.showSalwar && this.state.url2 != '' && <img style={{height:'auto',width:'100%'}} src={ this.state.url2 }/>}\r\n                   </Modal.Body>\r\n                   <Modal.Footer>\r\n                       <Button variant=\"primary\" onClick={()=> this.setState({showKameez:false, showSalwar:false})}>\r\n                           Close\r\n                       </Button>\r\n\r\n                   </Modal.Footer>\r\n               </Modal>\r\n\r\n           </Container>\r\n       )\r\n    }\r\n\r\n}","D:\\Jetbrain\\saajaws\\saajcalcengine\\src\\components\\Blouse.tsx",["77","78","79"],"\r\nimport * as React from \"react\";\r\nimport {CommonPros, BlouseStyle} from \"../typedef/style\";\r\nimport {Button, ButtonGroup, Col, Container, Form, Modal, Row, ToggleButton} from \"react-bootstrap\";\r\nimport {Storage} from \"aws-amplify\"\r\n\r\n\r\nexport class Blouse extends React.Component<CommonPros, any>{\r\n    private values: any\r\n\r\n    constructor(props:any) {\r\n        super(props);\r\n        this.values = {};\r\n        this.state = {showBlouse:false}\r\n\r\n        }\r\n\r\n    componentDidMount(): void {\r\n        Storage.get(\"BLOUSE.png\").then( (data) => {\r\n                this.setState(\r\n                    {\r\n                        url1 :  data\r\n                    })\r\n            }\r\n        ).catch(er => console.log('Error',er))\r\n    }\r\n\r\n    render(): React.ReactNode {\r\n        return (\r\n            <Container style={{marginTop:'15px'}}>\r\n                <Row>\r\n                    <Form>\r\n                        <h5>Blouse Fitting (in inches):\r\n                            <ButtonGroup toggle className=\"mb-2\">\r\n                                <ToggleButton\r\n                                    type=\"checkbox\"\r\n                                    variant=\"link\"\r\n                                    checked={this.state.showBlouse}\r\n                                    value=\"1\"\r\n                                    onChange={(e) => {this.setState({showBlouse: e.currentTarget.checked}); }}>\r\n                                    How to measure?\r\n                                </ToggleButton>\r\n                            </ButtonGroup>\r\n                        </h5>\r\n                        <Form.Row className=\"align-items-center\">\r\n                            <Col  className=\"my-1\">\r\n                                <Form.Label>Bust</Form.Label>\r\n                                <Form.Control type=\"text\"\r\n                                              onChange={e=>{this.values.bust= e.target.value}}\r\n                                />\r\n                            </Col>\r\n                            <Col className=\"my-1\">\r\n                                <Form.Label>Shoulder</Form.Label>\r\n                                <Form.Control type=\"number\"  onChange={e=>{this.values.shoulderLength= e.target.value}}\r\n                                />\r\n                            </Col>\r\n\r\n                            <Col className=\"my-1\">\r\n                                <Form.Label>Arm Hole: </Form.Label>\r\n                                <Form.Control type=\"number\"   onChange={e=>{this.values.armHoleSize= e.target.value}}\r\n                                />\r\n                            </Col>\r\n\r\n                            <Col>\r\n                                <Form.Label>Around Arm</Form.Label>\r\n                                <Form.Control type=\"number\" onChange={e=>{this.values.aroundArm= e.target.value}}\r\n                                />\r\n                            </Col>\r\n\r\n                            <Col  className=\"my-1\">\r\n                                <Form.Label>Blouse Length: </Form.Label>\r\n                                <Form.Control type=\"number\"  onChange={e=>{this.values.blouseLength= e.target.value}}\r\n                                />\r\n                            </Col>\r\n\r\n                        </Form.Row>\r\n\r\n                        <Button style={{marginTop:'10px', marginRight:'10px'}} variant=\"primary\" type=\"button\" onClick={()=>alert(\"You reccomended size is : FREE SIZE \")}>\r\n                            Submit\r\n                        </Button>\r\n\r\n\r\n                    </Form>\r\n                </Row>\r\n\r\n                <Modal show={this.state.showBlouse} >\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title>Blouse Image</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                        { this.state.showBlouse && this.state.url1 != '' && <img style={{height:'auto',width:'70%'}} src={ this.state.url1 }/>}\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                        <Button variant=\"primary\" onClick={()=> this.setState({showBlouse:false})}>\r\n                            Close\r\n                        </Button>\r\n\r\n                    </Modal.Footer>\r\n                </Modal>\r\n            </Container>\r\n        )\r\n    }\r\n}","D:\\Jetbrain\\saajaws\\saajcalcengine\\src\\util\\sizecalcutil.ts",["80","81"],"import {lehengaCholiSizes} from \"./measurementData\";\r\nimport {LehengaCholiStyle} from \"../typedef/style\";\r\nimport {changePct} from \"./percentageCalc\";\r\nimport {compareSizes} from \"./sizeComparator\";\r\n\r\n\r\nexport function calculateLehengaSize(input:LehengaCholiStyle){\r\n    let comment = ''\r\n    const lcStyles:LehengaCholiStyle[] = lehengaCholiSizes.types;\r\n    for( let i = 0; i < lcStyles.length-1; i++){\r\n        let style = lcStyles[i];\r\n        let nextStyle = lcStyles[i+1];\r\n        const inputBust = Number(input.bust);\r\n        const inputWaist = Number(input.aroundWaist);\r\n        if(inputBust <= nextStyle.bust && inputBust > style.bust){\r\n           // if(inputWaist <= nextStyle.aroundWaist && inputWaist > style.aroundWaist){\r\n                comment = comment + 'Size '+ nextStyle.size+' \\n';\r\n                comment = comment + compareSizes(input.aroundWaist, nextStyle.aroundWaist, lcStyles[0].aroundWaist, lcStyles[lcStyles.length-1].aroundWaist, 'around waist' ).message;\r\n                comment = comment + compareSizes(input.bust, nextStyle.bust, lcStyles[0].bust, lcStyles[lcStyles.length-1].bust, 'around bust' ).message;\r\n                comment = comment + compareSizes(input.aroundHips, nextStyle.aroundHips, lcStyles[0].aroundHips, lcStyles[lcStyles.length-1].aroundHips, 'around hips' ).message;\r\n                comment = comment + compareSizes(input.armHoleSize, nextStyle.armHoleSize, lcStyles[0].armHoleSize, lcStyles[lcStyles.length-1].armHoleSize, 'around arm hole' ).message;\r\n                //comment = comment + 'Around arm hole diff '+ changePct(input.armHoleSize, style.armHoleSize);\r\n                break;\r\n           // }\r\n        }\r\n\r\n    }\r\n    return comment;\r\n}","D:\\Jetbrain\\saajaws\\saajcalcengine\\src\\util\\measurementData.ts",["82"],"import {BlouseStyle, LehengaCholiStyle, PatternType, Size} from \"../typedef/style\";\r\n\r\nexport const lehengaCholiSizes: PatternType<LehengaCholiStyle> = {\r\n    types: [\r\n        {\r\n            size: Size.XS,\r\n            bust: 34,\r\n            aroundWaistForTop: 30,\r\n            armHoleSize: 14,\r\n            sleeveAround: 12,\r\n            sleeveLength: 10,\r\n            shoulderLength: 13.5,\r\n            topLength: 31,\r\n\r\n            aroundWaist: 30,\r\n            aroundHips: 37,\r\n            lehengaLength: 40\r\n        },\r\n        {\r\n            size: Size.S,\r\n            bust: 36,\r\n            aroundWaistForTop: 32,\r\n            armHoleSize: 14.5,\r\n            sleeveAround: 12.5,\r\n            sleeveLength: 10.5,\r\n            shoulderLength: 14,\r\n            topLength: 31,\r\n\r\n            aroundWaist: 33,\r\n            aroundHips: 40,\r\n            lehengaLength: 40\r\n        },\r\n        {\r\n            size: Size.M,\r\n            bust: 38,\r\n            aroundWaistForTop: 34,\r\n            armHoleSize: 15,\r\n            sleeveAround: 13,\r\n            sleeveLength: 11,\r\n            shoulderLength: 14.5,\r\n            topLength: 31,\r\n\r\n            aroundWaist: 35,\r\n            aroundHips: 42,\r\n            lehengaLength: 41\r\n        },\r\n        {\r\n            size: Size.L,\r\n            bust: 40,\r\n            aroundWaistForTop: 36,\r\n            armHoleSize: 15.5,\r\n            sleeveAround: 13.5,\r\n            sleeveLength: 11,\r\n            shoulderLength: 15,\r\n            topLength: 31,\r\n\r\n            aroundWaist: 37,\r\n            aroundHips: 44,\r\n            lehengaLength: 41\r\n        },\r\n        {\r\n            size: Size.XL,\r\n            bust: 42,\r\n            aroundWaistForTop: 38,\r\n            armHoleSize: 16,\r\n            sleeveAround: 14,\r\n            sleeveLength: 11,\r\n            shoulderLength: 15.5,\r\n            topLength: 31,\r\n\r\n            aroundWaist: 39,\r\n            aroundHips: 46,\r\n            lehengaLength: 41\r\n        },\r\n        {\r\n            size: Size.XXL,\r\n            bust: 44,\r\n            aroundWaistForTop: 40,\r\n            armHoleSize: 16.5,\r\n            sleeveAround: 14.5,\r\n            sleeveLength: 11,\r\n            shoulderLength: 16,\r\n            topLength: 31,\r\n\r\n            aroundWaist: 41,\r\n            aroundHips: 48,\r\n            lehengaLength: 41\r\n        }\r\n    ]\r\n}\r\n\r\n","D:\\Jetbrain\\saajaws\\saajcalcengine\\src\\typedef\\style.ts",[],["83","84"],"D:\\Jetbrain\\saajaws\\saajcalcengine\\src\\util\\percentageCalc.ts",[],"D:\\Jetbrain\\saajaws\\saajcalcengine\\src\\util\\sizeComparator.ts",[],{"ruleId":"85","replacedBy":"86"},{"ruleId":"87","replacedBy":"88"},{"ruleId":"89","severity":1,"message":"90","line":2,"column":56,"nodeType":"91","messageId":"92","endLine":2,"endColumn":67},{"ruleId":"89","severity":1,"message":"93","line":2,"column":69,"nodeType":"91","messageId":"92","endLine":2,"endColumn":74},{"ruleId":"89","severity":1,"message":"94","line":2,"column":76,"nodeType":"91","messageId":"92","endLine":2,"endColumn":86},{"ruleId":"95","severity":1,"message":"96","line":58,"column":38,"nodeType":"97","messageId":"98","endLine":58,"endColumn":40},{"ruleId":"99","severity":1,"message":"100","line":58,"column":47,"nodeType":"101","endLine":58,"endColumn":118},{"ruleId":"95","severity":1,"message":"96","line":132,"column":63,"nodeType":"97","messageId":"98","endLine":132,"endColumn":65},{"ruleId":"99","severity":1,"message":"100","line":132,"column":72,"nodeType":"101","endLine":132,"endColumn":139},{"ruleId":"95","severity":1,"message":"96","line":133,"column":65,"nodeType":"97","messageId":"98","endLine":133,"endColumn":67},{"ruleId":"99","severity":1,"message":"100","line":133,"column":74,"nodeType":"101","endLine":133,"endColumn":141},{"ruleId":"95","severity":1,"message":"96","line":137,"column":67,"nodeType":"97","messageId":"98","endLine":137,"endColumn":69},{"ruleId":"99","severity":1,"message":"100","line":137,"column":76,"nodeType":"101","endLine":137,"endColumn":142},{"ruleId":"95","severity":1,"message":"96","line":138,"column":67,"nodeType":"97","messageId":"98","endLine":138,"endColumn":69},{"ruleId":"99","severity":1,"message":"100","line":138,"column":76,"nodeType":"101","endLine":138,"endColumn":143},{"ruleId":"89","severity":1,"message":"102","line":3,"column":21,"nodeType":"91","messageId":"92","endLine":3,"endColumn":32},{"ruleId":"95","severity":1,"message":"96","line":91,"column":68,"nodeType":"97","messageId":"98","endLine":91,"endColumn":70},{"ruleId":"99","severity":1,"message":"100","line":91,"column":77,"nodeType":"101","endLine":91,"endColumn":143},{"ruleId":"89","severity":1,"message":"103","line":3,"column":9,"nodeType":"91","messageId":"92","endLine":3,"endColumn":18},{"ruleId":"89","severity":1,"message":"104","line":14,"column":15,"nodeType":"91","messageId":"92","endLine":14,"endColumn":25},{"ruleId":"89","severity":1,"message":"102","line":1,"column":9,"nodeType":"91","messageId":"92","endLine":1,"endColumn":20},{"ruleId":"85","replacedBy":"105"},{"ruleId":"87","replacedBy":"106"},"no-native-reassign",["107"],"no-negated-in-lhs",["108"],"@typescript-eslint/no-unused-vars","'FormControl' is defined but never used.","Identifier","unusedVar","'Image' is defined but never used.","'InputGroup' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'BlouseStyle' is defined but never used.","'changePct' is defined but never used.","'inputWaist' is assigned a value but never used.",["107"],["108"],"no-global-assign","no-unsafe-negation"]