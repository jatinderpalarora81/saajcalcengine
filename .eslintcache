[{"D:\\Jetbrain\\saajaws\\saajcalcengine\\src\\index.tsx":"1","D:\\Jetbrain\\saajaws\\saajcalcengine\\src\\reportWebVitals.ts":"2","D:\\Jetbrain\\saajaws\\saajcalcengine\\src\\App.tsx":"3","D:\\Jetbrain\\saajaws\\saajcalcengine\\src\\aws-exports.js":"4","D:\\Jetbrain\\saajaws\\saajcalcengine\\src\\components\\InputPage.tsx":"5","D:\\Jetbrain\\saajaws\\saajcalcengine\\src\\components\\Lehenga.tsx":"6","D:\\Jetbrain\\saajaws\\saajcalcengine\\src\\components\\SalwarKameez.tsx":"7","D:\\Jetbrain\\saajaws\\saajcalcengine\\src\\typedef\\style.ts":"8","D:\\Jetbrain\\saajaws\\saajcalcengine\\src\\util\\sizeOptions.ts":"9","D:\\Jetbrain\\saajaws\\saajcalcengine\\src\\components\\common\\VimeoVideo.tsx":"10","D:\\Jetbrain\\saajaws\\saajcalcengine\\src\\components\\common\\CommonTopFitting.tsx":"11","D:\\Jetbrain\\saajaws\\saajcalcengine\\src\\components\\common\\CutomTooltip.tsx":"12","D:\\Jetbrain\\saajaws\\saajcalcengine\\src\\util\\tooltipText.ts":"13","D:\\Jetbrain\\saajaws\\saajcalcengine\\src\\util\\nameUtil.ts":"14","D:\\Jetbrain\\saajaws\\saajcalcengine\\src\\components\\Western.tsx":"15","D:\\Jetbrain\\saajaws\\saajcalcengine\\src\\components\\common\\ModalPopup.tsx":"16"},{"size":500,"mtime":499162500000,"results":"17","hashOfConfig":"18"},{"size":425,"mtime":499162500000,"results":"19","hashOfConfig":"18"},{"size":346,"mtime":1607081613460,"results":"20","hashOfConfig":"18"},{"size":581,"mtime":1614617349822,"results":"21","hashOfConfig":"18"},{"size":7258,"mtime":1614617863889,"results":"22","hashOfConfig":"18"},{"size":7112,"mtime":1614358611850,"results":"23","hashOfConfig":"18"},{"size":6568,"mtime":1614358611862,"results":"24","hashOfConfig":"18"},{"size":1564,"mtime":1614331491687,"results":"25","hashOfConfig":"18"},{"size":980,"mtime":1614330832021,"results":"26","hashOfConfig":"18"},{"size":441,"mtime":1614332464112,"results":"27","hashOfConfig":"18"},{"size":4924,"mtime":1614273935624,"results":"28","hashOfConfig":"18"},{"size":638,"mtime":1614359220078,"results":"29","hashOfConfig":"18"},{"size":2180,"mtime":1614330139494,"results":"30","hashOfConfig":"18"},{"size":267,"mtime":1614327707674,"results":"31","hashOfConfig":"18"},{"size":4155,"mtime":1614358611833,"results":"32","hashOfConfig":"18"},{"size":1035,"mtime":1614617958653,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"k6gavc",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"36"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"36"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"36"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"36"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"36"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Jetbrain\\saajaws\\saajcalcengine\\src\\index.tsx",[],["72","73"],"D:\\Jetbrain\\saajaws\\saajcalcengine\\src\\reportWebVitals.ts",[],"D:\\Jetbrain\\saajaws\\saajcalcengine\\src\\App.tsx",[],"D:\\Jetbrain\\saajaws\\saajcalcengine\\src\\aws-exports.js",[],"D:\\Jetbrain\\saajaws\\saajcalcengine\\src\\components\\InputPage.tsx",["74","75","76","77","78","79"],"D:\\Jetbrain\\saajaws\\saajcalcengine\\src\\components\\Lehenga.tsx",["80","81"],"\r\nimport * as React from \"react\";\r\nimport {CommonProps, LehengaCholiStyle, PatternType} from \"../typedef/style\";\r\nimport {\r\n    Button,\r\n    ButtonGroup,\r\n    Col,\r\n    Container,\r\n    Form,\r\n    Modal,\r\n    Row,\r\n    ToggleButton,\r\n    Tooltip\r\n} from \"react-bootstrap\";\r\nimport {Storage} from \"aws-amplify\"\r\nimport {\r\n    topLength,\r\n    hipSize,\r\n    lehengaLen,\r\n    waistSize\r\n} from \"../util/sizeOptions\";\r\nimport {VimeoVideo} from \"./common/VimeoVideo\";\r\nimport CommonTopFitting from \"./common/CommonTopFitting\";\r\nimport CustomTooltip from \"./common/CutomTooltip\";\r\nimport {tooltipTxt} from \"../util/tooltipText\";\r\n\r\nexport class Lehenga extends React.Component<CommonProps, any>{\r\n     private values: LehengaCholiStyle|any;\r\n\r\n    constructor(props:any) {\r\n        super(props);\r\n        this.values = {'Pattern': PatternType.LehenhaCholi};\r\n        this.state = {howToMeasure:false}\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        // Storage.get(\"BLOUSE.png\").then( (data) => {\r\n        //         this.setState(\r\n        //          {\r\n        //              url1 :  data\r\n        //          })\r\n        //      }\r\n        // ).catch(er => console.log('Error',er))\r\n        // Storage.get(\"SKIRT.png\").then( (data) => {\r\n        //         this.setState(\r\n        //             {\r\n        //                 url2 :  data\r\n        //             })\r\n        //     }\r\n        // ).catch(er => console.log('Error',er))\r\n    }\r\n\r\n    validate(){\r\n        if(this.props.validateUserInfo()){\r\n            this.props.postMeasurement(this.values)\r\n        }\r\n    }\r\n\r\n    render(): React.ReactNode {\r\n        return( <Container style={{marginTop:'25px'}}>\r\n\r\n            <Row>\r\n                    <Form style={{ width:'100%'}}>\r\n\r\n                        <h5>Blouse Fitting :\r\n                            <ButtonGroup toggle className=\"mb-2\">\r\n                                <ToggleButton\r\n                                    type=\"checkbox\"\r\n                                    variant=\"link\"\r\n                                    checked={this.state.howToMeasure}\r\n                                    value=\"1\"\r\n                                    onChange={(e) => {this.setState({howToMeasure: e.currentTarget.checked}); }}\r\n                                >\r\n                                    How to measure?\r\n                                </ToggleButton>\r\n                            </ButtonGroup></h5>\r\n\r\n                       <CommonTopFitting values={this.values}/>\r\n\r\n                            <Form.Group as={Row} style={{ width:'100%'}}>\r\n                                <Form.Label >Blouse Length &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:<CustomTooltip msg={tooltipTxt.blouseLength}/></Form.Label>\r\n                                <Col >\r\n                                    <Form.Control as=\"select\"  onChange={e=>{this.values.topLength= e.target.value}}>\r\n                                        {topLength.map( i => <option> {i} </option>)}\r\n                                    </Form.Control>\r\n                                </Col>\r\n                            </Form.Group>\r\n\r\n\r\n                        <Form.Group as={Row} style={{ width:'100%'}}>\r\n                            <Form.Label>Padded &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:\r\n                                <CustomTooltip msg={tooltipTxt.Empty}/></Form.Label>\r\n                            <Col >\r\n                                <Form.Control as=\"select\"  onChange={e=>{this.values.pads= e.target.value}}>\r\n                                <option>Select</option>\r\n                                <option>No</option>\r\n                                <option>Yes</option>\r\n                            </Form.Control>\r\n                            </Col>\r\n                        </Form.Group>\r\n\r\n\r\n                        <h5 style={{marginTop:'25px', marginBottom:'20px'}}>Lehenga/Skirt Fitting :\r\n                            </h5>\r\n\r\n                        <Form.Group as={Row} style={{ width:'100%'}}>\r\n                            <Form.Label>Around Hips Size :  <CustomTooltip msg={tooltipTxt.hips}/> </Form.Label>\r\n                            <Col >\r\n                                <Form.Control as=\"select\"  onChange={e=>{this.values.aroundHips= e.target.value}}>\r\n                                    {hipSize.map( i => <option> {i} </option>)}\r\n                                </Form.Control>\r\n                            </Col>\r\n                        </Form.Group>\r\n\r\n\r\n                        <Form.Group as={Row} style={{ width:'100%'}}>\r\n                            <Form.Label>Around Waist Size :<CustomTooltip msg={tooltipTxt.waist}/></Form.Label>\r\n                            <Col >\r\n                                <Form.Control as=\"select\"  onChange={e=>{this.values.aroundWaist= e.target.value}}>\r\n                                    {waistSize.map( i => <option> {i} </option>)}\r\n                                </Form.Control>\r\n                            </Col>\r\n                        </Form.Group>\r\n\r\n\r\n                        <Form.Group as={Row} style={{ width:'100%'}}>\r\n                            <Form.Label>Lehenga Length &nbsp;&nbsp;&nbsp;:<CustomTooltip msg={tooltipTxt.Empty}/> </Form.Label>\r\n                            <Col >\r\n                                <Form.Control as=\"select\"  onChange={e=>{this.values.lehengaLength= e.target.value}}>\r\n                                    {lehengaLen.map( i => <option> {i} </option>)}\r\n                                </Form.Control>\r\n                            </Col>\r\n                        </Form.Group>\r\n\r\n\r\n                       <Form.Row>\r\n                            <Form.Label>Add Comments &nbsp;&nbsp;:<CustomTooltip msg={tooltipTxt.Empty}/></Form.Label>\r\n                            <Form.Control as=\"textarea\" rows={2} onChange={e=>{this.values.comments= e.target.value}}/>\r\n                       </Form.Row>\r\n\r\n                        <Button style={{marginTop:'10px', marginRight:'10px'}} variant=\"primary\" type=\"button\" onClick={()=>this.validate()}>\r\n                            Submit\r\n                        </Button>\r\n\r\n                    </Form>\r\n            </Row>\r\n            <Modal show={this.state.howToMeasure} >\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>Reference Video</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body >\r\n                    {/*{ this.state.showCholi && this.state.url1 != '' && <img style={{height:'auto',width:'100%'}} src={ this.state.url1 }/>}*/}\r\n                    {/*{ this.state.showLehanga && this.state.url2 != '' && <img style={{height:'auto',width:'100%'}} src={ this.state.url2 }/>}*/}\r\n                    <VimeoVideo id={'515597635'}/>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"primary\" onClick={()=> this.setState({howToMeasure:false})}>\r\n                        Close\r\n                    </Button>\r\n\r\n                </Modal.Footer>\r\n            </Modal>\r\n        </Container>)\r\n    }\r\n}","D:\\Jetbrain\\saajaws\\saajcalcengine\\src\\components\\SalwarKameez.tsx",["82","83"],"import * as React from \"react\";\r\nimport {Button, ButtonGroup, Col, Container, Form, Modal, Row, ToggleButton} from \"react-bootstrap\";\r\nimport {Storage} from \"aws-amplify\";\r\nimport {CommonProps, PatternType} from \"../typedef/style\";\r\nimport CommonTopFitting from \"./common/CommonTopFitting\";\r\nimport CustomTooltip from \"./common/CutomTooltip\";\r\nimport {tooltipTxt} from \"../util/tooltipText\";\r\nimport {hipSize, lehengaLen, salwarLen, topLength, waistSize} from \"../util/sizeOptions\";\r\nimport {VimeoVideo} from \"./common/VimeoVideo\";\r\n\r\nexport class SalwarKameez extends React.Component<CommonProps, any>{\r\n    private values: SalwarKameez|any;\r\n\r\n    constructor(props:any) {\r\n        super(props);\r\n        this.values = {'Pattern': PatternType.SalwarKammez};\r\n        this.state = {howToMeasure:false}\r\n    }\r\n    componentDidMount(): void {\r\n        // Storage.get(\"kameez.jpg\").then( (data) => {\r\n        //         this.setState(\r\n        //             {\r\n        //                 url1 :  data\r\n        //             })\r\n        //     }\r\n        // ).catch(er => console.log('Error',er))\r\n        // Storage.get(\"salwar.jpg\").then( (data) => {\r\n        //         this.setState(\r\n        //             {\r\n        //                 url2 :  data\r\n        //             })\r\n        //     }\r\n        // ).catch(er => console.log('Error',er))\r\n    }\r\n    validate(){\r\n        if(this.props.validateUserInfo()){\r\n            this.props.postMeasurement(this.values)\r\n        }\r\n    }\r\n\r\n    render(): React.ReactNode {\r\n       return (\r\n           <Container style={{marginTop:'25px'}}>\r\n               <Row>\r\n                       <Form style={{ width:'100%'}}>\r\n                           <h5>Kameez Fitting (in inches):\r\n                               <ButtonGroup toggle className=\"mb-2\">\r\n                                   <ToggleButton\r\n                                       type=\"checkbox\"\r\n                                       variant=\"link\"\r\n                                       checked={this.state.howToMeasure}\r\n                                       value=\"1\"\r\n                                       onChange={(e) => {this.setState({howToMeasure: e.currentTarget.checked}); }}\r\n                                   >\r\n                                       How to measure?\r\n                                   </ToggleButton>\r\n                               </ButtonGroup>\r\n                           </h5>\r\n                           <CommonTopFitting values={this.values}/>\r\n\r\n                           <Form.Group as={Row} style={{ width:'100%'}}>\r\n                               <Form.Label >Kurti Length &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:<CustomTooltip msg={tooltipTxt.Empty}/></Form.Label>\r\n                               <Col >\r\n                                   <Form.Control as=\"select\"  onChange={e=>{this.values.topLength= e.target.value}}>\r\n                                       {topLength.map( i => <option> {i} </option>)}\r\n                                   </Form.Control>\r\n                               </Col>\r\n                           </Form.Group>\r\n\r\n                           <h5 style={{marginTop:'25px'}}>Salwar Fitting (in inches):\r\n                            </h5>\r\n                           <Form.Group as={Row} style={{ width:'100%'}}>\r\n                               <Form.Label>Around Hips Size :  <CustomTooltip msg={tooltipTxt.hips}/> </Form.Label>\r\n                               <Col >\r\n                                   <Form.Control as=\"select\"  onChange={e=>{this.values.aroundHips= e.target.value}}>\r\n                                       {hipSize.map( i => <option> {i} </option>)}\r\n                                   </Form.Control>\r\n                               </Col>\r\n                           </Form.Group>\r\n\r\n\r\n                           <Form.Group as={Row} style={{ width:'100%'}}>\r\n                               <Form.Label>Around Waist Size :<CustomTooltip msg={tooltipTxt.waist}/></Form.Label>\r\n                               <Col >\r\n                                   <Form.Control as=\"select\"  onChange={e=>{this.values.aroundWaist= e.target.value}}>\r\n                                       {waistSize.map( i => <option> {i} </option>)}\r\n                                   </Form.Control>\r\n                               </Col>\r\n                           </Form.Group>\r\n\r\n\r\n                           <Form.Group as={Row} style={{ width:'100%'}}>\r\n                               <Form.Label>Salwar Length &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: <CustomTooltip msg={tooltipTxt.Empty}/> </Form.Label>\r\n                               <Col >\r\n                                   <Form.Control as=\"select\"  onChange={e=>{this.values.outseamLength= e.target.value}}>\r\n                                       {salwarLen.map( i => <option> {i} </option>)}\r\n                                   </Form.Control>\r\n                               </Col>\r\n                           </Form.Group>\r\n\r\n\r\n                           <Form.Row>\r\n                               <Form.Label>Add Comments &nbsp;&nbsp;:<CustomTooltip msg={tooltipTxt.Empty}/></Form.Label>\r\n                               <Form.Control as=\"textarea\" rows={2} onChange={e=>{this.values.comments= e.target.value}}/>\r\n                           </Form.Row>\r\n\r\n                           <Button style={{marginTop:'10px', marginRight:'10px'}} variant=\"primary\" type=\"button\" onClick={()=>this.validate()}>\r\n                               Submit\r\n                           </Button>\r\n\r\n                       </Form>\r\n               </Row>\r\n\r\n               <Modal show={this.state.howToMeasure } >\r\n                   <Modal.Header closeButton>\r\n                       <Modal.Title>Kammez Salwar measurement video</Modal.Title>\r\n                   </Modal.Header>\r\n                   <Modal.Body>\r\n                       {/*{ this.state.showKameez && this.state.url1 != '' && <img style={{height:'auto',width:'50%'}} src={ this.state.url1 }/>}*/}\r\n                       {/*{ this.state.showSalwar && this.state.url2 != '' && <img style={{height:'auto',width:'100%'}} src={ this.state.url2 }/>}*/}\r\n                       <VimeoVideo id={'515597838'}/>\r\n                   </Modal.Body>\r\n                   <Modal.Footer>\r\n                       <Button variant=\"primary\" onClick={()=> this.setState({howToMeasure:false})}>\r\n                           Close\r\n                       </Button>\r\n\r\n                   </Modal.Footer>\r\n               </Modal>\r\n\r\n           </Container>\r\n       )\r\n    }\r\n\r\n}","D:\\Jetbrain\\saajaws\\saajcalcengine\\src\\typedef\\style.ts",[],"D:\\Jetbrain\\saajaws\\saajcalcengine\\src\\util\\sizeOptions.ts",[],"D:\\Jetbrain\\saajaws\\saajcalcengine\\src\\components\\common\\VimeoVideo.tsx",[],"D:\\Jetbrain\\saajaws\\saajcalcengine\\src\\components\\common\\CommonTopFitting.tsx",["84","85","86","87","88","89"],"import {Component} from \"react\";\r\nimport {Button, ButtonGroup, Col, Form, OverlayTrigger, Row, ToggleButton, Tooltip} from \"react-bootstrap\";\r\nimport {\r\n    armHole,\r\n    belowBustWaistSize,\r\n    chestSizes,\r\n    shoulderWidth,\r\n    sleeveLength, topLength,\r\n    tucksPointSize\r\n} from \"../../util/sizeOptions\";\r\nimport * as React from \"react\";\r\nimport CustomTooltip from \"./CutomTooltip\";\r\nimport {tooltipTxt} from \"../../util/tooltipText\";\r\n\r\ninterface CommonTopFittingProps {\r\n    values:any\r\n\r\n}\r\nexport default class CommonTopFitting extends Component<CommonTopFittingProps, any>{\r\n\r\n    render(): React.ReactNode {\r\n        return (\r\n            <Form>\r\n\r\n                <Form.Group as={Row} style={{ width:'100%'}}>\r\n                    <Form.Label>Chest or Bust Size:  <CustomTooltip msg={tooltipTxt.chest}/>\r\n                    </Form.Label>\r\n                    <Col >\r\n                        <Form.Control as=\"select\"\r\n                                      onChange={e=>{this.props.values.bust= e.target.value}}>\r\n                            {chestSizes.map( i => <option> {i} </option>)}\r\n                        </Form.Control>\r\n                    </Col>\r\n                </Form.Group>\r\n\r\n                {/*<Form.Row className=\"align-items-center\">*/}\r\n                {/*    <Form.Label>Chest/Bust Size : <CustomTooltip msg={tooltipTxt.chest}/>*/}\r\n                {/*    </Form.Label>*/}\r\n                {/*    <Form.Control as=\"select\"*/}\r\n                {/*                  onChange={e=>{this.props.values.bust= e.target.value}}>*/}\r\n                {/*        {chestSizes.map( i => <option> {i} </option>)}*/}\r\n                {/*    </Form.Control>*/}\r\n                {/*</Form.Row>*/}\r\n\r\n                <Form.Group as={Row} style={{ width:'100%'}}>\r\n                    <Form.Label>Below Chest Waist:<CustomTooltip msg={tooltipTxt.belowChestWait}/></Form.Label>\r\n                    <Col >\r\n                        <Form.Control as=\"select\"\r\n                                      onChange={e=>{this.props.values.belowBustWaist= e.target.value}}>\r\n                            {belowBustWaistSize.map( i => <option> {i} </option>)}\r\n                        </Form.Control>\r\n                    </Col>\r\n                </Form.Group>\r\n\r\n                {/*<Form.Row className=\"align-items-center\">*/}\r\n                {/*    <Form.Label>Below Chest/Bust waist :  <CustomTooltip msg={tooltipTxt.belowChestWait}/></Form.Label>*/}\r\n                {/*    <Form.Control as=\"select\"*/}\r\n                {/*                  onChange={e=>{this.props.values.belowBustWaist= e.target.value}}>*/}\r\n                {/*        {belowBustWaistSize.map( i => <option> {i} </option>)}*/}\r\n                {/*    </Form.Control>*/}\r\n                {/*</Form.Row>*/}\r\n\r\n                <Form.Group as={Row} style={{ width:'100%'}}>\r\n                    <Form.Label>Tucks Points Len  &nbsp;&nbsp;:<CustomTooltip msg={tooltipTxt.tuckPoint}/> </Form.Label>\r\n                    <Col >\r\n                        <Form.Control as=\"select\" onChange={e=>{this.props.values.tucksPoint= e.target.value}}>\r\n                            {tucksPointSize.map( i => <option> {i} </option>)}\r\n                        </Form.Control>\r\n                    </Col>\r\n                </Form.Group>\r\n\r\n\r\n\r\n                <Form.Group as={Row} style={{ width:'100%'}}>\r\n                    <Form.Label>Arm Hole Size &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:<CustomTooltip msg={tooltipTxt.armHole}/> </Form.Label>\r\n                    <Col >\r\n                        <Form.Control as=\"select\"   onChange={e=>{this.props.values.armHoleSize= e.target.value}}>\r\n                            {armHole.map( i => <option> {i} </option>)}\r\n                        </Form.Control>\r\n                    </Col>\r\n                </Form.Group>\r\n\r\n\r\n                <Form.Group as={Row} style={{ width:'100%'}}>\r\n                    <Form.Label>Shoulder Width &nbsp;&nbsp;&nbsp;&nbsp;:<CustomTooltip msg={tooltipTxt.shoulder}/></Form.Label>\r\n                    <Col >\r\n                        <Form.Control as=\"select\" onChange={e=>{this.props.values.shoulderLength= e.target.value}}>\r\n                            {shoulderWidth.map( i => <option> {i} </option>)}\r\n                        </Form.Control>\r\n                    </Col>\r\n                </Form.Group>\r\n\r\n\r\n                <Form.Group as={Row} style={{ width:'100%'}}>\r\n                    <Form.Label>Sleeve Length &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:<CustomTooltip msg={tooltipTxt.sleeveLength}/> </Form.Label>\r\n                    <Col >\r\n                        <Form.Control as=\"select\" onChange={e=>{this.props.values.sleeveLength= e.target.value}}>\r\n                            {sleeveLength.map( i => <option> {i} </option>)}\r\n                        </Form.Control>\r\n                    </Col>\r\n                </Form.Group>\r\n\r\n\r\n            </Form>\r\n                )\r\n    }\r\n}","D:\\Jetbrain\\saajaws\\saajcalcengine\\src\\components\\common\\CutomTooltip.tsx",[],"D:\\Jetbrain\\saajaws\\saajcalcengine\\src\\util\\tooltipText.ts",[],"D:\\Jetbrain\\saajaws\\saajcalcengine\\src\\util\\nameUtil.ts",["90"],"import {Info} from \"../typedef/style\";\r\n\r\nexport const fileName = (info:Info):string=>{\r\n    const num = Math.floor(Math.random() * 10000);\r\n    const name = info.name && info.name != '' ? info.name.replace(/ /g,''):'name';\r\n    return name+'_'+info.phone+'_'+num;\r\n}","D:\\Jetbrain\\saajaws\\saajcalcengine\\src\\components\\Western.tsx",["91","92","93"],"\r\nimport * as React from \"react\";\r\nimport {BlouseStyle, CommonProps, PatternType, WesternStyle} from \"../typedef/style\";\r\nimport {Button, ButtonGroup, Col, Container, Form, Modal, Row, ToggleButton} from \"react-bootstrap\";\r\nimport {Storage} from \"aws-amplify\"\r\nimport CommonTopFitting from \"./common/CommonTopFitting\";\r\nimport CustomTooltip from \"./common/CutomTooltip\";\r\nimport {tooltipTxt} from \"../util/tooltipText\";\r\nimport {dressLen, lehengaLen} from \"../util/sizeOptions\";\r\nimport {VimeoVideo} from \"./common/VimeoVideo\";\r\n\r\n\r\nexport class Western extends React.Component<CommonProps, any>{\r\n    private values:WesternStyle|any;\r\n\r\n    constructor(props:any) {\r\n        super(props);\r\n        this.values = {'Pattern': PatternType.Western};\r\n        this.state = {howToMeasure:false}\r\n\r\n        }\r\n\r\n    componentDidMount(): void {\r\n        // Storage.get(\"BLOUSE.png\").then( (data) => {\r\n        //         this.setState(\r\n        //             {\r\n        //                 url1 :  data\r\n        //             })\r\n        //     }\r\n        // ).catch(er => console.log('Error',er))\r\n    }\r\n    validate(){\r\n        if(this.props.validateUserInfo()){\r\n            this.props.postMeasurement(this.values)\r\n        }\r\n    }\r\n\r\n    render(): React.ReactNode {\r\n        return (\r\n            <Container style={{marginTop:'15px'}}>\r\n                <Row>\r\n                    <Form style={{ width:'100%'}}>\r\n                        <h5>Western Dress Fitting:\r\n                            <ButtonGroup toggle className=\"mb-2\">\r\n                                <ToggleButton\r\n                                    type=\"checkbox\"\r\n                                    variant=\"link\"\r\n                                    checked={this.state.howToMeasure}\r\n                                    value=\"1\"\r\n                                    onChange={(e) => {this.setState({howToMeasure: e.currentTarget.checked}); }}>\r\n                                    How to measure?\r\n                                </ToggleButton>\r\n                            </ButtonGroup>\r\n                        </h5>\r\n                        <CommonTopFitting values={this.values}/>\r\n\r\n                        <Form.Group as={Row} style={{ width:'100%'}}>\r\n                            <Form.Label>Dress Length &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:<CustomTooltip msg={tooltipTxt.Empty}/> </Form.Label>\r\n                            <Col >\r\n                                <Form.Control as=\"select\"  onChange={e=>{this.values.dressLength= e.target.value}}>\r\n                                    {dressLen.map( i => <option> {i} </option>)}\r\n                                </Form.Control>\r\n                            </Col>\r\n                        </Form.Group>\r\n\r\n\r\n                        <Form.Row>\r\n                            <Form.Label>Add Comments &nbsp;&nbsp;:<CustomTooltip msg={tooltipTxt.Empty}/></Form.Label>\r\n                            <Form.Control as=\"textarea\" rows={2} onChange={e=>{this.values.comments= e.target.value}}/>\r\n                        </Form.Row>\r\n\r\n                        <Button style={{marginTop:'10px', marginRight:'10px'}} variant=\"primary\" type=\"button\" onClick={()=>this.validate()}>\r\n                            Submit\r\n                        </Button>\r\n\r\n                    </Form>\r\n                </Row>\r\n\r\n                <Modal show={this.state.howToMeasure} >\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title>Blouse Measurement Video</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                        {/*{ this.state.howToMeasure && this.state.url1 != '' && <img style={{height:'auto',width:'70%'}} src={ this.state.url1 }/>}*/}\r\n                        <VimeoVideo id={'515596882'}/>\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                        <Button variant=\"primary\" onClick={()=> this.setState({howToMeasure:false})}>\r\n                            Close\r\n                        </Button>\r\n\r\n                    </Modal.Footer>\r\n                </Modal>\r\n            </Container>\r\n        )\r\n    }\r\n}","D:\\Jetbrain\\saajaws\\saajcalcengine\\src\\components\\common\\ModalPopup.tsx",[],{"ruleId":"94","replacedBy":"95"},{"ruleId":"96","replacedBy":"97"},{"ruleId":"98","severity":1,"message":"99","line":2,"column":56,"nodeType":"100","messageId":"101","endLine":2,"endColumn":67},{"ruleId":"98","severity":1,"message":"102","line":2,"column":69,"nodeType":"100","messageId":"101","endLine":2,"endColumn":74},{"ruleId":"98","severity":1,"message":"103","line":2,"column":76,"nodeType":"100","messageId":"101","endLine":2,"endColumn":86},{"ruleId":"98","severity":1,"message":"104","line":3,"column":9,"nodeType":"100","messageId":"101","endLine":3,"endColumn":12},{"ruleId":"105","severity":1,"message":"106","line":83,"column":38,"nodeType":"107","messageId":"108","endLine":83,"endColumn":40},{"ruleId":"109","severity":1,"message":"110","line":83,"column":47,"nodeType":"111","endLine":83,"endColumn":118},{"ruleId":"98","severity":1,"message":"112","line":13,"column":5,"nodeType":"100","messageId":"101","endLine":13,"endColumn":12},{"ruleId":"98","severity":1,"message":"113","line":15,"column":9,"nodeType":"100","messageId":"101","endLine":15,"endColumn":16},{"ruleId":"98","severity":1,"message":"113","line":3,"column":9,"nodeType":"100","messageId":"101","endLine":3,"endColumn":16},{"ruleId":"98","severity":1,"message":"114","line":8,"column":18,"nodeType":"100","messageId":"101","endLine":8,"endColumn":28},{"ruleId":"98","severity":1,"message":"115","line":2,"column":9,"nodeType":"100","messageId":"101","endLine":2,"endColumn":15},{"ruleId":"98","severity":1,"message":"116","line":2,"column":17,"nodeType":"100","messageId":"101","endLine":2,"endColumn":28},{"ruleId":"98","severity":1,"message":"117","line":2,"column":41,"nodeType":"100","messageId":"101","endLine":2,"endColumn":55},{"ruleId":"98","severity":1,"message":"118","line":2,"column":62,"nodeType":"100","messageId":"101","endLine":2,"endColumn":74},{"ruleId":"98","severity":1,"message":"112","line":2,"column":76,"nodeType":"100","messageId":"101","endLine":2,"endColumn":83},{"ruleId":"98","severity":1,"message":"119","line":8,"column":19,"nodeType":"100","messageId":"101","endLine":8,"endColumn":28},{"ruleId":"105","severity":1,"message":"106","line":5,"column":41,"nodeType":"107","messageId":"108","endLine":5,"endColumn":43},{"ruleId":"98","severity":1,"message":"120","line":3,"column":9,"nodeType":"100","messageId":"101","endLine":3,"endColumn":20},{"ruleId":"98","severity":1,"message":"113","line":5,"column":9,"nodeType":"100","messageId":"101","endLine":5,"endColumn":16},{"ruleId":"98","severity":1,"message":"114","line":9,"column":19,"nodeType":"100","messageId":"101","endLine":9,"endColumn":29},"no-native-reassign",["121"],"no-negated-in-lhs",["122"],"@typescript-eslint/no-unused-vars","'FormControl' is defined but never used.","Identifier","unusedVar","'Image' is defined but never used.","'InputGroup' is defined but never used.","'API' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Tooltip' is defined but never used.","'Storage' is defined but never used.","'lehengaLen' is defined but never used.","'Button' is defined but never used.","'ButtonGroup' is defined but never used.","'OverlayTrigger' is defined but never used.","'ToggleButton' is defined but never used.","'topLength' is defined but never used.","'BlouseStyle' is defined but never used.","no-global-assign","no-unsafe-negation"]